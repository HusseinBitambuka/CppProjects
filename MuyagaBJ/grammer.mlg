t
# ============================================================
# MuyagaLang Grammar
# ============================================================

# 1. Lexical Structure

KEYWORDS =
    "let" | "func" | "return" | "while" | "if" | "else" | "print" |
    "int" | "char" | "string" | "alloc" | "free" ;

SYMBOLS =
    "=" | "+" | "-" | "*" | "/" | "(" | ")" | "{" | "}" |
    ";" | "," | "<" | ">" | "<=" | ">=" | "==" | "!=" | "&" ;

IDENTIFIER  = [a-zA-Z_], { [a-zA-Z0-9_] } ;
NUMBER      = [0-9], { [0-9] } ;
CHAR        = "'", [ -~ ], "'" ;
STRING      = '"', { [^"\\] | "\\" , any }, '"' ;

WHITESPACE  = { " " | "\t" | "\r" | "\n" } ;
COMMENT     = "//" , { any }, "\n" ;

# Whitespace and comments are ignored by the parser.

# ------------------------------------------------------------
# 2. Program Structure
# ------------------------------------------------------------

Program        = { TopLevelDecl } ;
TopLevelDecl   = FuncDecl | VarDecl ;

# ------------------------------------------------------------
# 3. Declarations
# ------------------------------------------------------------

VarDecl        = Type , IDENTIFIER , "=" , Expression , ";" ;
Type           = "int" | "char" | "string" ;

FuncDecl       = "func" , Type , IDENTIFIER ,
                  "(" , [ ParamList ] , ")" , Block ;
ParamList      = Type , IDENTIFIER , { "," , Type , IDENTIFIER } ;

# ------------------------------------------------------------
# 4. Statements
# ------------------------------------------------------------

Statement      = VarDecl
               | Assignment
               | PrintStmt
               | ReturnStmt
               | WhileStmt
               | IfStmt
               | AllocStmt
               | FreeStmt
               | Block ;

Assignment     = IDENTIFIER , "=" , Expression , ";" ;
PrintStmt      = "print" , "(" , Expression , ")" , ";" ;
ReturnStmt     = "return" , Expression , ";" ;
WhileStmt      = "while" , "(" , Expression , ")" , Block ;
IfStmt         = "if" , "(" , Expression , ")" , Block , [ "else" , Block ] ;
AllocStmt      = IDENTIFIER , "=" , "alloc" , "(" , Expression , ")" , ";" ;
FreeStmt       = "free" , "(" , IDENTIFIER , ")" , ";" ;
Block          = "{" , { Statement } , "}" ;

# ------------------------------------------------------------
# 5. Expressions
# ------------------------------------------------------------

Expression     = EqualityExpr ;
EqualityExpr   = RelationalExpr , { ( "==" | "!=" ) , RelationalExpr } ;
RelationalExpr = AdditiveExpr , { ( "<" | "<=" | ">" | ">=" ) , AdditiveExpr } ;
AdditiveExpr   = MultiplicativeExpr , { ( "+" | "-" ) , MultiplicativeExpr } ;
MultiplicativeExpr = UnaryExpr , { ( "*" | "/" ) , UnaryExpr } ;
UnaryExpr      = [ "-" | "&" ] , PrimaryExpr ;
PrimaryExpr    = NUMBER
               | CHAR
               | STRING
               | IDENTIFIER
               | FuncCall
               | "(" , Expression , ")" ;

FuncCall       = IDENTIFIER , "(" , [ ArgList ] , ")" ;
ArgList        = Expression , { "," , Expression } ;

# ------------------------------------------------------------
# 6. Example Program
# ------------------------------------------------------------

# func int factorial(int n) {
#     if (n <= 1) {
#         return 1;
#     } else {
#         return n * factorial(n - 1);
#     }
# }
#
# func void main() {
#     int x = 5;
#     int y = factorial(x);
#     string msg = alloc(16);
#     print("Factorial:");
#     print(y);
#     free(msg);
# }

# ============================================================
# End of MuyagaLang Grammar
# ============================================================
